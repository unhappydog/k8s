[debug] Created tunnel using local port: '35165'

[debug] SERVER: "127.0.0.1:35165"

[debug] Original chart version: ""
[debug] CHART PATH: /home/lp/python/fenbushi/prometheus/prometheus

NAME:   mangy-grasshopper
REVISION: 1
RELEASED: Mon Nov  5 14:42:59 2018
CHART: prometheus-7.3.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
alertmanager:
  affinity: {}
  baseURL: /
  configMapOverrideName: ""
  enabled: true
  extraArgs: {}
  extraEnv: {}
  image:
    pullPolicy: IfNotPresent
    repository: prom/alertmanager
    tag: v0.15.2
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    hosts: []
    tls: []
  name: alertmanager
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    subPath: ""
  podAnnotations: {}
  prefixURL: ""
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
  tolerations: []
alertmanagerFiles:
  alertmanager.yml:
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
configmapReload:
  extraArgs: {}
  extraConfigmapMounts: []
  image:
    pullPolicy: IfNotPresent
    repository: jimmidyson/configmap-reload
    tag: v0.2.2
  name: configmap-reload
  resources: {}
extraScrapeConfigs: null
initChownData:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: busybox
    tag: latest
  name: init-chown-data
  resources: {}
kubeStateMetrics:
  args: {}
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/coreos/kube-state-metrics
    tag: v1.4.0
  name: kube-state-metrics
  nodeSelector: {}
  pod:
    labels: {}
  podAnnotations: {}
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    annotations:
      prometheus.io/scrape: "true"
    clusterIP: None
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
  tolerations: []
networkPolicy:
  enabled: false
nodeExporter:
  enabled: true
  extraArgs: {}
  extraConfigmapMounts: []
  extraHostPathMounts: []
  hostNetwork: true
  hostPID: true
  image:
    pullPolicy: IfNotPresent
    repository: prom/node-exporter
    tag: v0.16.0
  name: node-exporter
  nodeSelector: {}
  pod:
    labels: {}
  podAnnotations: {}
  podSecurityPolicy:
    enabled: false
  priorityClassName: ""
  resources: {}
  securityContext: {}
  service:
    annotations:
      prometheus.io/scrape: "true"
    clusterIP: None
    externalIPs: []
    hostPort: 9100
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9100
    type: ClusterIP
  tolerations: []
  updateStrategy:
    type: OnDelete
pushgateway:
  enabled: true
  extraArgs: {}
  image:
    pullPolicy: IfNotPresent
    repository: prom/pushgateway
    tag: v0.5.2
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    tls: []
  name: pushgateway
  nodeSelector: {}
  podAnnotations: {}
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    annotations:
      prometheus.io/probe: pushgateway
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9091
    type: ClusterIP
  tolerations: []
rbac:
  create: true
server:
  affinity: {}
  baseURL: ""
  configMapOverrideName: ""
  enableAdminApi: false
  extraArgs: {}
  extraConfigmapMounts: []
  extraHostPathMounts: []
  extraSecretMounts: []
  global:
    evaluation_interval: 1m
    scrape_interval: 1m
    scrape_timeout: 10s
  image:
    pullPolicy: IfNotPresent
    repository: prom/prometheus
    tag: v2.4.3
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    hosts: []
    tls: []
  name: server
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    subPath: ""
  podAnnotations: {}
  prefixURL: ""
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  retention: ""
  securityContext: {}
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
  terminationGracePeriodSeconds: 300
  tolerations: []
serverFiles:
  alerts: {}
  prometheus.yml:
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/${1}/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
  rules: {}
serviceAccounts:
  alertmanager:
    create: true
    name: null
  kubeStateMetrics:
    create: true
    name: null
  nodeExporter:
    create: true
    name: null
  pushgateway:
    create: true
    name: null
  server:
    create: true
    name: null

HOOKS:
MANIFEST:

---
# Source: prometheus/templates/alertmanager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "alertmanager"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-alertmanager
data:
  alertmanager.yml: |
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
---
# Source: prometheus/templates/server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
data:
  alerts: |
    {}
    
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
      
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/${1}/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
    
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: default
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
  rules: |
    {}
---
# Source: prometheus/templates/alertmanager-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "alertmanager"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-alertmanager
spec:
  accessModes:
    - ReadWriteOnce
    
  resources:
    requests:
      storage: "2Gi"
---
# Source: prometheus/templates/server-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
spec:
  accessModes:
    - ReadWriteOnce
    
  resources:
    requests:
      storage: "8Gi"
---
# Source: prometheus/templates/alertmanager-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "alertmanager"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-alertmanager
---
# Source: prometheus/templates/kube-state-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "kube-state-metrics"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-kube-state-metrics
---
# Source: prometheus/templates/node-exporter-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "node-exporter"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-node-exporter
---
# Source: prometheus/templates/pushgateway-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "pushgateway"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-pushgateway
---
# Source: prometheus/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
---
# Source: prometheus/templates/kube-state-metrics-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "kube-state-metrics"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-kube-state-metrics
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - persistentvolumeclaims
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - endpoints
      - secrets
      - configmaps
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
---
# Source: prometheus/templates/server-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: prometheus/templates/kube-state-metrics-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "kube-state-metrics"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: mangy-grasshopper-prometheus-kube-state-metrics
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mangy-grasshopper-prometheus-kube-state-metrics
---
# Source: prometheus/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
subjects:
  - kind: ServiceAccount
    name: mangy-grasshopper-prometheus-server
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mangy-grasshopper-prometheus-server
---
# Source: prometheus/templates/alertmanager-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "alertmanager"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-alertmanager
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
  selector:
    app: prometheus
    component: "alertmanager"
    release: mangy-grasshopper
  type: "ClusterIP"
---
# Source: prometheus/templates/kube-state-metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "kube-state-metrics"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-kube-state-metrics
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: prometheus
    component: "kube-state-metrics"
    release: mangy-grasshopper
  type: "ClusterIP"
---
# Source: prometheus/templates/node-exporter-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "node-exporter"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-node-exporter
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
  selector:
    app: prometheus
    component: "node-exporter"
    release: mangy-grasshopper
  type: "ClusterIP"
---
# Source: prometheus/templates/pushgateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
    
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "pushgateway"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-pushgateway
spec:
  ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
  selector:
    app: prometheus
    component: "pushgateway"
    release: mangy-grasshopper
  type: "ClusterIP"
---
# Source: prometheus/templates/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
    component: "server"
    release: mangy-grasshopper
  type: "ClusterIP"
---
# Source: prometheus/templates/node-exporter-daemonset.yaml
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "node-exporter"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-node-exporter
spec:
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: prometheus
        component: "node-exporter"
        release: mangy-grasshopper
    spec:
      serviceAccountName: mangy-grasshopper-prometheus-node-exporter
      containers:
        - name: prometheus-node-exporter
          image: "prom/node-exporter:v0.16.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          resources:
            {}
            
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
      hostNetwork: true
      hostPID: true
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
---
# Source: prometheus/templates/alertmanager-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "alertmanager"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-alertmanager
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        component: "alertmanager"
        release: mangy-grasshopper
    spec:
      serviceAccountName: mangy-grasshopper-prometheus-alertmanager
      containers:
        - name: prometheus-alertmanager
          image: "prom/alertmanager:v0.15.2"
          imagePullPolicy: "IfNotPresent"
          env:
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --web.external-url=/

          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /#/status
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "/data"
              subPath: ""

        - name: prometheus-alertmanager-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9093/-/reload
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: mangy-grasshopper-prometheus-alertmanager
        - name: storage-volume
          persistentVolumeClaim:
            claimName: mangy-grasshopper-prometheus-alertmanager
---
# Source: prometheus/templates/kube-state-metrics-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "kube-state-metrics"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-kube-state-metrics
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        component: "kube-state-metrics"
        release: mangy-grasshopper
    spec:
      serviceAccountName: mangy-grasshopper-prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: "quay.io/coreos/kube-state-metrics:v1.4.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: metrics
              containerPort: 8080
          resources:
            {}
---
# Source: prometheus/templates/pushgateway-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "pushgateway"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-pushgateway
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        component: "pushgateway"
        release: mangy-grasshopper
    spec:
      serviceAccountName: mangy-grasshopper-prometheus-pushgateway
      containers:
        - name: prometheus-pushgateway
          image: "prom/pushgateway:v0.5.2"
          imagePullPolicy: "IfNotPresent"
          args:
          ports:
            - containerPort: 9091
          readinessProbe:
            httpGet:
              path: /#/status
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            {}
---
# Source: prometheus/templates/server-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
    chart: prometheus-7.3.0
    component: "server"
    heritage: Tiller
    release: mangy-grasshopper
  name: mangy-grasshopper-prometheus-server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        component: "server"
        release: mangy-grasshopper
    spec:
      serviceAccountName: mangy-grasshopper-prometheus-server
      initContainers:
      - name: "init-chown-data"
        image: "busybox:latest"
        imagePullPolicy: "IfNotPresent"
        resources:
            {}
            
        # 65534 is the nobody user that prometheus uses.
        command: ["chown", "-R", "65534:65534", "/data"]
        volumeMounts:
        - name: storage-volume
          mountPath: /data
          subPath: ""
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.4.3"
          imagePullPolicy: "IfNotPresent"
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: mangy-grasshopper-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: mangy-grasshopper-prometheus-server
